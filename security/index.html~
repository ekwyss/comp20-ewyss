<!DOCTYPE html>

<html>

  <head>
    <meta charset="utf-8" />
    <title>Security</title>
    <link rel="stylesheet" href="style.css" type="text/css" />
  </head>

  <body>
    <h1>Security and Privacy Assessment of a Web Application</h1>
    <h2>Introduction</h2>
    <p>This is an assessment of the web app http://vulnerableapp.herokuapp.com/ which stores users login name, latitude, and longitude, and login time in a database and displays them on the page. I was tasked with finding vulnerabilities in this web app.</p>
    <h2>Methodology</h2>
    <p>I first looked at the website that had already been attacked by my classmates to get an idea og what sort of things could be done to the web app, and then I performed black box testing (ran the web application without reading the source code) and attempted to attack the site blindly. Lastly I performed white box testing (read through the source code and attacked what looked to be vulnerable areas).
      <h2>Abstract of Findings</h2>
    <p>I have found that it is possible to steal all users information, insert unwanted images to the site, and redirect users to a potentially dangerous or fake site. These, among other issues make this web app easily exploitable.</p>
    <h2>Issues Found</h2>
    <ol>
      <li>Cross Site Scripting Vulnerability</li>
	<ul>
	  <li>POST /sendLocation</li>
	  <li>High: XSS allows attackers embed scripts in a page that can steal user info, hijack user sessions, display unwanted content, etc.</li>
	  <li>User input is not properly escaped so javascript tags can be included to insert malicious scripts.</li>
	  <li>Entering "curl --data "login=&#60script&#62alert('XSS Vulnerability')&#60/script&#62&lat=2&lng=2" http://localhost:3000/sendLocation" results in:
	  <p><img src="XSS1.png" alt="XSS"/></p>
	  <li>all user input should be properly escaped to separate untrusted data from activebrowser content, special characters should be HTML entity encoded to protect from attackers swapping into any execution context.</li>
	</ul>
      <li>Injection</li>
      <ul>
	<li>GET /checkins.json</li>
	<li>High: Through injection attackers can gain access to every users information. Using the URL  http://localhost:3000/checkins.json?login[$ne]=1 returns all users information. In this particular instance we can only steal data that isn't particularly important but if things such as passwords or bank account numbers were stored this would be a very urgent issue.</li>
	<li>The GET route /checkins.json does not separate untrusted data(user input) from the query. Using a true statement in the login query results in all users information being displayed:</li>
	<li><img src="injection.png" alt="injection" /></li>
	<li>Instead of using dynamic queries use parameterized queries with variable binding so strings such as "'or '1'='1" or "[$ne]=1" wouldn't work to return all users info.</li>
      </ul>
      <li>Cross site scripting vulnerability</li>
      <ul>
	<li>Get /</li>
	<li>High: Allows embedded javascript from POST /sendLocation to be run on the page. The line indexPage += "<li>" + results[count].login + ..." allows the code to be executed through the login variable. Through this route an attacker can redirect an unsuspecting user to a phishing site and steal their credentials.</li>
	<li>going to the site results in this(currently redirects to harmless site but could be used maliciously):</li>
	<p><img src="XSS1.png" alt="XSS" /></p>
	<p><img src="XSS2.png" alt="XSS" /></p>
	<li>Same solution as XSS issue through post route, make sure the login data is properly escaped.</li>
      </ul>
    </ol>
    <h2>Conclusion</h2>
    <p>Overall this web app has glaring security issues which could render the site unusable or leave users vital information unprotected. Through XSS and injection the least problematic thing that could occur is attackers deface the website, causing users to abandon it, while the worst thing is attackers could redirect users to malicious websites and leave you responsible.I would also recommend looking into how you store data directly into the database as it a isn't secure method.</p>
  </body>
</html>
